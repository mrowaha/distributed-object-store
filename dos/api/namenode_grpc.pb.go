// this proto file contains definitions for communication between the client and the name node

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: namenode.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NameService_CreateObject_FullMethodName = "/proto.NameService/CreateObject"
	NameService_DeleteObject_FullMethodName = "/proto.NameService/DeleteObject"
	NameService_UpdateObject_FullMethodName = "/proto.NameService/UpdateObject"
	NameService_LeaseObject_FullMethodName  = "/proto.NameService/LeaseObject"
)

// NameServiceClient is the client API for NameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameServiceClient interface {
	// this service defines procedures to be used for the object store operations
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	UpdateObject(ctx context.Context, in *UpdateObjectReq, opts ...grpc.CallOption) (*UpdateObjectRes, error)
	LeaseObject(ctx context.Context, in *LeaseObjectReq, opts ...grpc.CallOption) (*LeaseObjectRes, error)
}

type nameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameServiceClient(cc grpc.ClientConnInterface) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateObjectResponse)
	err := c.cc.Invoke(ctx, NameService_CreateObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, NameService_DeleteObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) UpdateObject(ctx context.Context, in *UpdateObjectReq, opts ...grpc.CallOption) (*UpdateObjectRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateObjectRes)
	err := c.cc.Invoke(ctx, NameService_UpdateObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) LeaseObject(ctx context.Context, in *LeaseObjectReq, opts ...grpc.CallOption) (*LeaseObjectRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaseObjectRes)
	err := c.cc.Invoke(ctx, NameService_LeaseObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameServiceServer is the server API for NameService service.
// All implementations must embed UnimplementedNameServiceServer
// for forward compatibility.
type NameServiceServer interface {
	// this service defines procedures to be used for the object store operations
	CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	UpdateObject(context.Context, *UpdateObjectReq) (*UpdateObjectRes, error)
	LeaseObject(context.Context, *LeaseObjectReq) (*LeaseObjectRes, error)
	mustEmbedUnimplementedNameServiceServer()
}

// UnimplementedNameServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNameServiceServer struct{}

func (UnimplementedNameServiceServer) CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedNameServiceServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedNameServiceServer) UpdateObject(context.Context, *UpdateObjectReq) (*UpdateObjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (UnimplementedNameServiceServer) LeaseObject(context.Context, *LeaseObjectReq) (*LeaseObjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseObject not implemented")
}
func (UnimplementedNameServiceServer) mustEmbedUnimplementedNameServiceServer() {}
func (UnimplementedNameServiceServer) testEmbeddedByValue()                     {}

// UnsafeNameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameServiceServer will
// result in compilation errors.
type UnsafeNameServiceServer interface {
	mustEmbedUnimplementedNameServiceServer()
}

func RegisterNameServiceServer(s grpc.ServiceRegistrar, srv NameServiceServer) {
	// If the following call pancis, it indicates UnimplementedNameServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NameService_ServiceDesc, srv)
}

func _NameService_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_CreateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_UpdateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).UpdateObject(ctx, req.(*UpdateObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_LeaseObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).LeaseObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_LeaseObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).LeaseObject(ctx, req.(*LeaseObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NameService_ServiceDesc is the grpc.ServiceDesc for NameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _NameService_CreateObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _NameService_DeleteObject_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _NameService_UpdateObject_Handler,
		},
		{
			MethodName: "LeaseObject",
			Handler:    _NameService_LeaseObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namenode.proto",
}

const (
	DataService_RegisterNode_FullMethodName = "/proto.DataService/RegisterNode"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// this service defines procedures to be used by the namenode to register and manage datanodes
	RegisterNode(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeHeartBeat, CommandNodeRes], error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) RegisterNode(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeHeartBeat, CommandNodeRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], DataService_RegisterNode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeHeartBeat, CommandNodeRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_RegisterNodeClient = grpc.BidiStreamingClient[NodeHeartBeat, CommandNodeRes]

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility.
type DataServiceServer interface {
	// this service defines procedures to be used by the namenode to register and manage datanodes
	RegisterNode(grpc.BidiStreamingServer[NodeHeartBeat, CommandNodeRes]) error
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServiceServer struct{}

func (UnimplementedDataServiceServer) RegisterNode(grpc.BidiStreamingServer[NodeHeartBeat, CommandNodeRes]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}
func (UnimplementedDataServiceServer) testEmbeddedByValue()                     {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_RegisterNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).RegisterNode(&grpc.GenericServerStream[NodeHeartBeat, CommandNodeRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_RegisterNodeServer = grpc.BidiStreamingServer[NodeHeartBeat, CommandNodeRes]

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterNode",
			Handler:       _DataService_RegisterNode_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "namenode.proto",
}
